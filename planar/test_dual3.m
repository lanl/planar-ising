
clear all;

% build grid on torus

s = 3;
n = s*s;

grid = reshape([1:n],s,s);
grid = [grid grid(:,1:2); grid(1:2,:) grid(1:2,1:2)]; % allow periodic indexing

m = 5*n;
arcs = zeros(m,2);
Gamma = cell(n+1,1);

k = 1;
for i = 2:s+1
  for j = 2:s+1
    v = grid(i,j);
    arcs(k,:) = [v grid(i,j+1)];
    arcs(k+1,:) = [v grid(i-1,j)];
    arcs(k+2,:) = [v grid(i,j-1)];
    arcs(k+3,:) = [v grid(i+1,j)];
    arcs(k+4,:) = [v n+1];
    Gamma{v} = [k:k+4];
    k=k+5;
  end
end

arcs = [arcs; [(n+1)*ones(n,1) [1:n]']]; 
Gamma{n+1} = [m+1:m+n];

inv_arc = zeros(m+n,1);

for i = 2:s+1
  for j = 2:s+1
    v = grid(i,j);
    inv_arc(Gamma{v}(1)) = Gamma{grid(i,j+1)}(3);
    inv_arc(Gamma{v}(2)) = Gamma{grid(i-1,j)}(4);
    inv_arc(Gamma{v}(3)) = Gamma{grid(i,j-1)}(1);
    inv_arc(Gamma{v}(4)) = Gamma{grid(i+1,j)}(2);
    inv_arc(Gamma{v}(5)) = Gamma{n+1}(v);
    inv_arc(Gamma{n+1}(v)) = Gamma{v}(5);
  end
end

% pick random kasteleyn orientation

sigma = kasteleyn_orientation(Gamma,arcs,inv_arc);


% run BP algorithm generated by tree cover

tree_sub = zeros(s*(s-1),1);
k=1;
for i = 1:s
  for j = 1:s-1
    tree_sub(k) = Gamma{grid(i,j)}(1);
    k=k+1;
  end
end
tree_sub = [tree_sub; inv_arc(tree_sub)];
 
[Z_bp,lambda] = planar_cover_infer(zeros(n+1,1),sigma,arcs,inv_arc,tree_sub)

P_bp = sqrt(1/Z_bp)


% run BP algorithm generated by planar cover

planar_sub = zeros(2*s*(s-1),1);
k=1;
for i = 1:s
  for j = 1:s-1
    planar_sub(k) = Gamma{grid(i,j)}(1);
    k=k+1;
  end
end
for j = 1:s
  for i = 1:s-1
    planar_sub(k) = Gamma{grid(i,j)}(3);
    k=k+1;
  end
end
planar_sub = [planar_sub; inv_arc(planar_sub)];

[Z_pbp,lambda] = planar_cover_infer(zeros(n+1,1),sigma,arcs,inv_arc,planar_sub)

P_pbp = sqrt(1/Z_pbp)
