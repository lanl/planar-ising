
clear all;

% build x-grid on torus

s = 2;
n = s*s;

grid = reshape([1:n],s,s);
grid = [grid grid(:,1:2); grid(1:2,:) grid(1:2,1:2)]; % allow periodic indexing

m = 8*n;
arcs = zeros(m,2);
Gamma = cell(n,1);

k = 1;
for i = 2:s+1
  for j = 2:s+1
    v = grid(i,j);
    arcs(k,:) = [v grid(i,j+1)];
    arcs(k+1,:) = [v grid(i-1,j+1)];
    arcs(k+2,:) = [v grid(i-1,j)];
    arcs(k+3,:) = [v grid(i-1,j-1)];
    arcs(k+4,:) = [v grid(i,j-1)];
    arcs(k+5,:) = [v grid(i+1,j-1)];
    arcs(k+6,:) = [v grid(i+1,j)];
    arcs(k+7,:) = [v grid(i+1,j+1)];
    Gamma{v} = [k:k+7];
    k=k+8;
  end
end

inv_arc = zeros(m,1);

for i = 2:s+1
  for j = 2:s+1
    v = grid(i,j);
    inv_arc(Gamma{v}(1)) = Gamma{grid(i,j+1)}(5);
    inv_arc(Gamma{v}(2)) = Gamma{grid(i-1,j+1)}(6);
    inv_arc(Gamma{v}(3)) = Gamma{grid(i-1,j)}(7);
    inv_arc(Gamma{v}(4)) = Gamma{grid(i-1,j-1)}(8);
    inv_arc(Gamma{v}(5)) = Gamma{grid(i,j-1)}(1);
    inv_arc(Gamma{v}(6)) = Gamma{grid(i+1,j-1)}(2);
    inv_arc(Gamma{v}(7)) = Gamma{grid(i+1,j)}(3);
    inv_arc(Gamma{v}(8)) = Gamma{grid(i+1,j+1)}(4);
  end
end

% dual graph
[g,faces,circuits,dual_arcs] = dual_graph(Gamma,arcs,inv_arc);

% pick a random Kasteleyn orientation of the surface graph
sigma = kasteleyn_orientation(Gamma,arcs,inv_arc);

f = length(faces);
for i = 1:f
  C = circuits{i};
  sg = prod(sigma(C));
  if (sg == +1)
    error('orientation is not kasteleyn');
  end
end


% edge weights

w = zeros(m,1);





% skew-symmetric adjacency matrix

A = sparse(arcs(:,1),arcs(:,2),sigma,n,n);

P = sqrt(det(A))

% run BP algorithm generated by tree cover

tree_sub = zeros(s*(s-1),1);
k=1;
for i = 1:s
  for j = 1:s-1
    tree_sub(k) = Gamma{grid(i,j)}(1);
    k=k+1;
  end
end

tree_sub = [tree_sub; inv_arc(tree_sub)];

A = sparse(arcs(tree_sub,1),arcs(tree_sub,2),sigma(tree_sub),n,n);
P_tree = sqrt(det(A))
 
[Z_bp,lambda] = planar_cover_infer(zeros(n,1),sigma,arcs,inv_arc,tree_sub);

P_bp = sqrt(1/Z_bp)


% run BP algorithm generated by planar cover

planar_sub = zeros(2*s*(s-1)+(s-1)*(s-1),1);

k=1;
for i = 1:s
  for j = 1:s-1
    planar_sub(k) = Gamma{grid(i,j)}(1);
    k=k+1;
  end
end

for j = 1:s
  for i = 1:s-1
    planar_sub(k) = Gamma{grid(i,j)}(7);
    k=k+1;
  end
end

for i = 1:s-1
  for j = 1:s-1
    planar_sub(k) = Gamma{grid(i,j)}(8);
    k=k+1;
  end
end

planar_sub = [planar_sub; inv_arc(planar_sub)];

A = sparse(arcs(planar_sub,1),arcs(planar_sub,2),sigma(planar_sub),n,n);

P_planar = sqrt(det(A))

[Z_pbp,lambda] = planar_cover_infer(zeros(n,1),sigma,arcs,inv_arc,planar_sub)

P_pbp = sqrt(1/Z_pbp)

