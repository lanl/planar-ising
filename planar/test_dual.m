
clear all;

% build grid on torus

s = 2;
n = s*s;
periodic = 0;

grid = reshape([1:n],s,s);
grid = [grid grid(:,1:2); grid(1:2,:) grid(1:2,1:2)]; % allow periodic indexing

m = 4*n;

Gamma = cell(n,1);
arcs = zeros(m,2);

k = 1;
for i = 2:s+1
  for j = 2:s+1
    v = grid(i,j);
    arcs(k,:) = [v grid(i,j+1)];
    arcs(k+1,:) = [v grid(i-1,j)];
    arcs(k+2,:) = [v grid(i,j-1)];
    arcs(k+3,:) = [v grid(i+1,j)];
    Gamma{v} = [k:k+3];
    k=k+4;
  end
end

inv_arc = zeros(m,1);

for i = 2:s+1
  for j = 2:s+1
    v = grid(i,j);
    inv_arc(Gamma{v}(1)) = Gamma{grid(i,j+1)}(3);
    inv_arc(Gamma{v}(2)) = Gamma{grid(i-1,j)}(4);
    inv_arc(Gamma{v}(3)) = Gamma{grid(i,j-1)}(1);
    inv_arc(Gamma{v}(4)) = Gamma{grid(i+1,j)}(2);
  end
end

for k = 1:m
  k_inv = inv_arc(k);
  if (arcs(k,1)~=arcs(k_inv,2) | arcs(k,2)~=arcs(k_inv,1))
    error('some problem here');
  end
end

% pick a random Kasteleyn orientation of the surface graph

sigma = kasteleyn_orientation(Gamma,arcs,inv_arc);

% edge weights

w = ones(m,1);

if (~periodic) % cut edges that make grid periodic...

  for i = 1:s
    w(Gamma{grid(i,1)}(4)) = 0;
    w(Gamma{grid(i,1)}(5)) = 0;
    w(Gamma{grid(i,1)}(6)) = 0;
    w(Gamma{grid(i,s)}(2)) = 0;
    w(Gamma{grid(i,s)}(1)) = 0;
    w(Gamma{grid(i,s)}(8)) = 0;
  end

  for j = 1:s
    w(Gamma{grid(1,j)}(2)) = 0;
    w(Gamma{grid(1,j)}(3)) = 0;
    w(Gamma{grid(1,j)}(4)) = 0;
    w(Gamma{grid(s,j)}(6)) = 0;
    w(Gamma{grid(s,j)}(7)) = 0;
    w(Gamma{grid(s,j)}(8)) = 0;
  end

end

w = w .* sigma;

% run BP algorithm generated by tree cover

tree_sub = zeros(s*(s-1),1);
k=1;
for i = 1:s
  for j = 1:s-1
    tree_sub(k) = Gamma{grid(i,j)}(1);
    k=k+1;
  end
end

tree_sub = [tree_sub; inv_arc(tree_sub)];
 
[Z_bp,lambda] = planar_cover_infer(zeros(n,1),w,arcs,inv_arc,tree_sub)

P_bp = sqrt(1/Z_bp)

% run BP algorithm generated by planar cover

planar_sub = zeros(2*s*(s-1),1);
k=1;
for i = 1:s
  for j = 1:s-1
    planar_sub(k) = Gamma{grid(i,j)}(1);
    k=k+1;
  end
end
for j = 1:s
  for i = 1:s-1
    planar_sub(k) = Gamma{grid(i,j)}(4);
    k=k+1;
  end
end
planar_sub = [planar_sub; inv_arc(planar_sub)];

[Z_pbp,lambda] = planar_cover_infer(zeros(n,1),w,arcs,inv_arc,planar_sub)

P_pbp = sqrt(1/Z_pbp)
